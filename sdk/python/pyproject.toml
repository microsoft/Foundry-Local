[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "foundry-local-sdk"
dynamic = ["version", "dependencies"]
description = "Foundry Local Manager Python SDK: Control-plane SDK for Foundry Local."
readme = "README.md"
requires-python = ">=3.9"
license = {file = "LICENSE.txt"}
authors = [
    {name = "Microsoft Corporation", email = "foundrylocaldevs@microsoft.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

[project.urls]
Homepage = "https://github.com/microsoft/Foundry-Local"

[tool.setuptools]
packages = ["foundry_local"]

[tool.setuptools.dynamic]
version = {attr = "foundry_local.__version__"}
dependencies = {file = ["requirements.txt"]}

[tool.pylint.messages_control]
disable = [
  "consider-using-from-import",
  "cyclic-import",
  "duplicate-code",
  "fixme",
  "format",
  "import-error",
  "invalid-name",
  "line-too-long",
  "missing-docstring",
  "no-else-return",
  "no-member",
  "no-name-in-module",
  "too-few-public-methods",
  "too-many-ancestors",
  "too-many-arguments",
  "too-many-branches",
  "too-many-instance-attributes",
  "too-many-lines",
  "too-many-locals",
  "too-many-positional-arguments",
  "too-many-public-methods",
  "too-many-return-statements",
  "too-many-statements",
  "unnecessary-ellipsis"
]

[tool.ruff]
line-length = 120
target-version = "py39"

[tool.ruff.lint]
select = [
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "D", # pydocstyle
    "E", # pycodestyle
    "F", # Pyflakes
    "G", # flake8-logging-format
    "I", # isort
    "ISC", # flake8-implicit-str-concat
    "LOG", # flake8-logging
    "N", # pep8-naming
    "NPY", # modern numpy
    "PERF", # Perflint
    "PIE", # flake8-pie
    "PYI", # flake8-pyi
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
    "SLOT", # flake8-slot
    "T10", # flake8-debugger
    "TID", # Disallow relative imports
    "TRY", # flake8-try-except-raise
    "UP", # pyupgrade
    "W", # pycodestyle
    "YTT", # flake8-2020
]
ignore = [
    "B9",  # Opinionated bugbear rules
    "C408", # Sometimes it is preferable when we construct kwargs
    "D1", # D1 is for missing docstrings, which is not yet enforced.
    "D202", # D202 Too strict. "No blank lines allowed after function docstring"
    "D205", # D205 Too strict. "1 blank line required between summary line and description"
    "D212",
    "D400",
    "D401", # First line of docstring should be in imperative mood
    "D415", # D415 Not yet enforced. "First line should end with a period, question mark, or exclamation point"
    "E1", "E2", "E3", # Pycodestyle formatting rules that conflicts with the formatter
    "E501", # Line length. Not enforced because black will handle formatting
    "SIM103", # "Return the condition directly" obscures logic sometimes
    "N802", # Nxx: ONNX Script function sometimes use upper case for names.
    "N803",
    "N806",
    "N999", # Invalid module name
    "NPY002", # We may not always need a generator
    "PERF203", # try-except in loops sometimes necessary
    "PERF401", # List comprehension is not always readable
    "PYI041", # int | float is more clear
    "RUF022", # We don't need to sort __all__ for elements to be grouped
    "RUF027", # This is used for creating rest API urls
    "RUF031", # Parentheses for tuple in subscripts is more readable
    "RUF052", # Variables with `_` prefix may not be dummy variables in all cases
    "SIM102", # Collapible if statements are not always more readable
    "SIM108", # We don't always encourage ternary operators
    "SIM114", # Don't always combine if branches for debugability
    "SIM116", # Don't use dict lookup to replace if-else
    "TRY002", # Create your own exception
    "TRY003", # Messages can be constructed in the exception
    "UP006", # keep-runtime-typing
    "UP007", # keep-runtime-typing
    "UP045", # TODO: Support new style type annotations
]
ignore-init-module-imports = true

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.ruff.lint.pydocstyle]
convention = "google"
